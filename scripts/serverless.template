{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "ApiAddress": {
      "Description": "API address for accessing the Lambda Function",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "apiGateway"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/loanamort"
          ]
        ]
      }
    }
  },
  "Parameters": {
    "functionName": {
      "AllowedPattern": "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$",
      "Default": "LoanAmortFucntion",
      "Type": "String",
      "Description": "Name of the Lambda Function."
    },
    "apiName": {
      "AllowedPattern": "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$",
      "Default": "LoanAmortApi",
      "Type": "String",
      "Description": "Name of the API gateway used to acces the Lambda function."
    },
    "s3Bucket": {
      "Type": "String",
      "Description": "S3 Buket Name (e.g. mybucket)."
    },
    "s3Key": {
      "Type": "String",
      "Description": "*.zip/jar path to the file containing the required source inside the bucket (e.g. mypipline/BuildArtifacts/zzz)."
    }
  },
  "Description": "AWS CloudFormation script used to create Lambda Function and API gateway to access it.",
  "Resources": {
    "apiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "info": {
            "version": "2018-11-01T18:06:27Z",
            "title": "apiGateway"
          },
          "paths": {
            "/": {
              "get": {
                "responses": {
                  "200": {
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}:fncAlias/invocations"
                  },
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_templates",
                  "requestTemplates": {
                    "application/json": "{\r\n  \"principal\": \"$input.params('p')\",\r\n  \"term\": \"$input.params('t')\",\r\n  \"rate\": \"$input.params('r')\"\r\n}"
                  },
                  "type": "aws"
                },
                "consumes": [
                  "application/json"
                ],
                "parameters": [
                  {
                    "required": true,
                    "type": "string",
                    "name": "p",
                    "in": "query"
                  },
                  {
                    "required": true,
                    "type": "string",
                    "name": "t",
                    "in": "query"
                  },
                  {
                    "required": true,
                    "type": "string",
                    "name": "r",
                    "in": "query"
                  }
                ],
                "produces": [
                  "application/json"
                ]
              }
            }
          },
          "swagger": "2.0",
          "schemes": [
            "https"
          ],
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            }
          }
        },
        "Name": {
          "Ref": "apiName"
        }
      }
    },
    "lambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "s3Bucket"
          },
          "S3Key": {
            "Ref": "s3Key"
          }
        },
        "Description": "Calculator Function description",
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 512,
        "Handler": "com.microfocus.loan.amort.lambda.CalculateLoanHandler",
        "Role": {
          "Fn::GetAtt": [
            "lambdaFunctionRole",
            "Arn"
          ]
        },
        "Timeout": 15,
        "Runtime": "java8",
        "FunctionName": {
          "Ref": "functionName"
        }
      }
    },
    "lambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "apiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "apiGateway"
        },
        "Description": "RestApi deployment",
        "StageName": "Stage"
      }
    },
    "lambdaFunctionDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "ServerlessDeploymentApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE",
            "DEPLOYMENT_STOP_ON_ALARM",
            "DEPLOYMENT_STOP_ON_REQUEST"
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        },
        "DeploymentConfigName": {
          "Fn::Sub": [
            "CodeDeployDefault.Lambda${ConfigName}",
            {
              "ConfigName": "AllAtOnce"
            }
          ]
        },
        "DeploymentStyle": {
          "DeploymentType": "BLUE_GREEN",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        }
      }
    },
    "lambdaFunctionAliasfncAlias": {
      "Type": "AWS::Lambda::Alias",
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "ServerlessDeploymentApplication"
          },
          "DeploymentGroupName": {
            "Ref": "lambdaFunctionDeploymentGroup"
          }
        }
      },
      "Properties": {
        "FunctionVersion": {
          "Fn::GetAtt": [
            "lambdaFunctionVersion",
            "Version"
          ]
        },
        "FunctionName": {
          "Ref": "lambdaFunction"
        },
        "Name": "fncAlias"
      }
    },
    "apiGatewayloanamortStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "apiGatewayDeployment"
        },
        "RestApiId": {
          "Ref": "apiGateway"
        },
        "StageName": "loanamort"
      }
    },
    "lambdaFunctionVersion": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "FunctionName": {
          "Ref": "lambdaFunction"
        }
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ComputePlatform": "Lambda"
      }
    },
    "permissions": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "functionName"
              },
              ":fncAlias"
            ]
          ]
        },
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"
        }
      }
    }
  }
}